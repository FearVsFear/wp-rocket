<?php
defined( 'ABSPATH' ) or	die( 'Cheatin&#8217; uh?' );

/**
 * Get an url without protocol
 *
 * @since 1.3.0
 */
function rocket_remove_url_protocol( $url, $no_dots=false )
{
	$url = str_replace( array( 'http://', 'https://' ) , '', $url );
	if ( apply_filters( 'rocket_url_no_dots', $no_dots ) ) {
		$url = str_replace( '.', '_', $url );
	}
	return $url;
}

/**
 * Extract and return host, path and scheme of an URL
 *
 * @since 2.1 Add $query variable
 * @since 2.0
 */
function get_rocket_parse_url( $url )
{
	$url    = parse_url( $url );
	$host   = isset( $url['host'] ) ? $url['host'] : '';
	$path   = isset( $url['path'] ) ? $url['path'] : '';
	$scheme = isset( $url['scheme'] ) ? $url['scheme'] : '';
	$query  = isset( $url['query'] ) ? $url['query'] : '';
	return apply_filters( 'rocket_parse_url', array( $host, $path, $scheme, $query ) );
}

/*
 * Get an URL with one of CNAMES added in options
 *
 * @since 2.1
 */
function get_rocket_cdn_url( $url, $zone = array( 'all' ) )
{
	$cnames = get_rocket_cdn_cnames( $zone );

	if ( (int) get_rocket_option('cdn') == 0 || empty( $cnames ) ) {
		return $url;
	}

	list( $host, $path, $scheme, $query ) = get_rocket_parse_url( $url );
	$query = ! empty( $query ) ? '?' . $query : '';

	if ( empty( $scheme ) ) {
		$home = rocket_remove_url_protocol( home_url() );

		// Check if URL is external
		if ( strpos( $path, $home ) === false ) {
			return $url;
		} else {
			$path = str_replace( $home, '', ltrim( $path, '//' ) );
		}
	}
	
	$url = rtrim( $cnames[(abs(crc32($path))%count($cnames))] , '/' ) . $path . $query;
	return $url;
}

/*
 * Wrapper of get_rocket_cdn_url() and print result
 *
 * @since 2.1
 */
function rocket_cdn_url( $url, $zone = array( 'all' ) )
{
	echo get_rocket_cdn_url( $url, $zone );
}

/**
 * TO DO
 *
 * @since 2.1
 */
function get_rocket_minify_files( $files, $force_pretty_url = true, $pretty_filename = null )
{
	// Get the internal CSS Files
	// To avoid conflicts with file URLs are too long for browsers,
	// cut into several parts concatenated files
	$tags 		= '';
	$data_attr  = 'data-minify="1"';
	$urls 		= array( 0 => '' );
	$bubble     = is_child_theme() ? $url . 'bubbleCssImports=1&' : '';
	$base_url 	= WP_ROCKET_URL . 'min/?' . $bubble . 'f=';
	$files  	= is_array( $files ) ? $files : (array)$files;

	if ( count( $files ) ) {

		$i=0;
		foreach ( $files as $file ) {

			$file = parse_url( $file, PHP_URL_PATH );

			/**
			 * Filter the total number of files generated by the minification
			 *
			 * @since 2.1
			 * @param string The maximum number of characters in a URL
			 * @param string The file's extention
			*/
			$filename_length = apply_filters( 'rocket_minify_filename_length', 255, pathinfo( $file, PATHINFO_EXTENSION ) );

			// +1 : we count the extra comma
			if ( strlen( $urls[$i] . $base_url . $file )+1>=$filename_length ) {
				$i++;
			}

			$urls[$i] .= $file.',';

		}

		foreach ( $urls as $url ) {

			$url = $base_url . rtrim( $url, ',' );
			$ext = pathinfo( $url, PATHINFO_EXTENSION );

			if ( $force_pretty_url && ( defined( 'SCRIPT_DEBUG' ) && !SCRIPT_DEBUG ) ) {

				/**
				 * Filter the minify URL
				 *
				 * If true returns,
				 * the minify URL like example.com/wp-content/plugins/wp-rocket/min/?f=...
				 *
				 * @param bool
				 * @since 2.1
				*/
				if ( ! apply_filters( 'rocket_minify_debug', false ) ) {

					$blog_id = get_current_blog_id();
					$pretty_url = !$pretty_filename ? WP_ROCKET_MINIFY_CACHE_URL . $blog_id . '/' . md5( $url . get_rocket_option( 'minify_' . $ext . '_key', create_rocket_uniqid() ) ) . '.' . $ext : WP_ROCKET_MINIFY_CACHE_URL . $blog_id . '/' . $pretty_filename . '.' . $ext;

					/**
					 * Filter the pretty minify URL
					 *
					 * @param string $pretty_url
					 * @param string $pretty_filename
					 * @since 2.1
					*/
					$pretty_url = apply_filters( 'rocket_minify_pretty_url', $pretty_url, $pretty_filename );

					$url = rocket_fetch_and_cache_minify( $url, $pretty_url ) ? $pretty_url : $url;

				}

			}

			// If CSS & JS use a CDN
			$url = get_rocket_cdn_url( $url, array( 'all', 'css_and_js', $ext ) );

			// Get tags for CSS file
			if ( $ext == 'css' ) {
				$tags .= sprintf( '<link rel="stylesheet" href="%s" %s/>', esc_attr( apply_filters( 'rocket_css_url', $url ) ), $data_attr );

			}
			// Get tags for JS file
			elseif ( $ext == 'js' ) {
				$tags .= sprintf( '<script src="%s" %s></script>', esc_attr( apply_filters( 'rocket_js_url', $url ) ), $data_attr );

			}

		}

	}

	return $tags;
}

/*
 * Wrapper of get_rocket_minify_files() and echoes the result
 *
 * @since 2.1
 */
function rocket_minify_files( $files, $force_pretty_url = true, $pretty_filename = null )
{
	echo get_rocket_minify_files( $files, $force_pretty_url, $pretty_filename );
}